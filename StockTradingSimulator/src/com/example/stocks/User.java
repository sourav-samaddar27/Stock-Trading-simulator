package com.example.stocks;

import java.math.BigDecimal;
import java.util.Objects;
public class User {

    private int id;
    private String username;
    private String passwordHash;
    private BigDecimal balance;

    public User(String username, String passwordHash){
//        Constructor for creating a NEW User (e.g., during registration).
//        The 'id' is typically auto-generated by the database, so it's not passed here.
//        Initial balance is set to a default value.
        this.username=username;
        this.passwordHash=passwordHash;
        this.balance=new BigDecimal("10000.00");
    }
    public User(int id, String username, String passwordHash,BigDecimal balance){
        this.id=id;
        this.username=username;
        this.passwordHash=passwordHash;
        this.balance=new BigDecimal("10000.00");
    }

    public int getId(){
        return id;
    }
    public String getUsername(){
        return username;
    }

    public String getPasswordHash(){
        return passwordHash;
    }
    public BigDecimal getBalance(){
        return balance;
    }

    public void setUsername(String username){
        this.username=username;
    }
    public void setPasswordHash(String passwordHash){
        this.passwordHash=passwordHash;
    }

    public void setBalance(BigDecimal balance){
        if(balance.compareTo(BigDecimal.ZERO)<0){
            throw new IllegalArgumentException("Balance cannot be negative.");

        }
        this.balance=balance;
    }

    @Override
    public boolean equals(Object o){
        if(this==o) return true;
        if(o==null || getClass()!=o.getClass()) return false;
        User user=(User) o;

        if(this.id!=0 && user.id!=0){
            return id==user.id;
        }
        return Objects.equals(username,user.username);

    }

    @Override
    public int hashCode(){
        if(this.id!=0){
            return Objects.hash(id);
        }
        return Objects.hash(username);
    }
}
