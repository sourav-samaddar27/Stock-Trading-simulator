package com.example.stocks;

import java.math.BigDecimal;
import java.util.Objects; // Imports Objects utility class for equals() and hashCode().
public class Stock {

    private int id;
    private String symbol;
    private String companyName;
    private BigDecimal currentPrice;

    //Constructor for creating a NEW Stock (e.g., when initializing the market with new stocks).
    //The 'id' is typically auto-generated by the database, so it's not passed here.
    public Stock(String symbol,String companyName, BigDecimal initialPrice){
        this.symbol=symbol;
        this.companyName=companyName;
        this.currentPrice=initialPrice;
    }

    public Stock(int id,String symbol,String companyName, BigDecimal initialPrice){
        this.id=id;
        this.symbol=symbol;
        this.companyName=companyName;
        this.currentPrice=initialPrice;
    }

    public int getId(){
        return id;
    }
    public String getSymbol(){
        return symbol;
    }
    public String getCompanyName(){
        return companyName;
    }
    public BigDecimal getCurrentPrice(){
        return currentPrice;
    }
    public void setCompanyName(String companyName){
        this.companyName=companyName;
    }
    public void setCurrentPrice(BigDecimal currentPrice){
        if(currentPrice.compareTo(BigDecimal.ZERO)<0){
            throw new IllegalArgumentException("Stock price cannot be negative");
        }
        this.currentPrice=currentPrice;
    }

    @Override
    public String toString(){
        return "Stock{"+ "id="+id+", symbol='"+symbol+ '\''+", companyName='"+companyName+'\''+", currentPrice="+currentPrice+'}';
    }
    @Override
    public boolean equals(Object o){
        if(this==o) return true;
        if(o==null || getClass()!=o.getClass()) return false;
        Stock stock=(Stock) o;
        if(this.id!=0 && stock.id!=0){
            return id==stock.id;
        }
        return Objects.equals(symbol,stock.symbol);
    }

    @Override
    public int hashCode(){
        if(this.id!=0){
            return Objects.hash(id);
        }
        return Objects.hash(symbol);
    }


}
